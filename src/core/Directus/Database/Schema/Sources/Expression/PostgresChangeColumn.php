<?php

namespace Directus\Database\Schema\Sources\Expression;

use Zend\Db\Sql\Ddl\Column\Column;
use Zend\Db\Sql\Ddl\Column\AbstractLengthColumn;
use Directus\Database\Ddl\Column\CollectionLength;

/**
 * Decorator for columns with PostgreSQL during an ALTER TABLE ALTER COLUMN command
 */
class PostgresChangeColumn extends Column
{
    /**
     * @var Column
     */
    protected $column;

    /**
     * Decorator for columns
     *
     * @param int $length
     */
    public function __construct($originalColumn)
    {
        $this->column = $originalColumn;
        $sealBreaker = function () {
            return $this->type;
        };        
        $this->type = $sealBreaker->call($originalColumn);
        parent::__construct($originalColumn->getName(), $originalColumn->isNullable(), $originalColumn->getDefault(), $originalColumn->getOptions());
    }

    /**
     * Override the generated SQL for PostgreSQL.
     * ALTER TABLE for PotgreSQL doesn't work with a single CHANGE COLUMN
     * but multiple calls to ALTER COLUMN for each piece of data to change
     * 
     * @return array
     * 
     */
    public function getExpressionData()
    {

        $options = $this->column->getOptions();

        $length = null;
        //Sub-types specific features
        if ($this->column instanceof AbstractLengthColumn || $this->column instanceof CollectionLength) {
            $lengthExpressionSealBreaker = function () {
                return $this->getLengthExpression();
            };
            $length = $lengthExpressionSealBreaker->call($this->column);
        }                
        if (isset($options['length'])) {
            $length = $options['length'];
        }

        $spec = 'ALTER COLUMN %s SET DATA TYPE %s';
        $type = $this->type;
        if (isset($length) && $length>0) {
            $type .= '(' . $length . ')';
        }
        $params = [$this->name, $type];
        $types = [self::TYPE_IDENTIFIER, self::TYPE_LITERAL];

        //Identity can only be manipulated on integer-like fields in PostgreSQL
        if ($this->column instanceof \Zend\Db\Sql\Ddl\Column\Integer) {
            if ($options["identity"]==true) {
                $spec .= ', ALTER COLUMN %s SET GENERATED BY DEFAULT';
            } else {
                $spec .= ', ALTER COLUMN %s DROP IDENTITY IF EXISTS';
            }
            $params[] = $this->name;
            $types[] = self::TYPE_IDENTIFIER;
        }

        $spec .= ', ALTER COLUMN %s ';
        $params[] = $this->name;
        $types[]  = self::TYPE_IDENTIFIER;
        if ($this->isNullable) {
            $spec .= 'DROP NOT NULL';
        } else {
            $spec .= 'SET NOT NULL';
        }

        //Do not change default values for auto-incremented fields
        if ($options["identity"]!==true) {
            $spec .= ', ALTER COLUMN %s ';
            $params[] = $this->name;
            $types[]  = self::TYPE_IDENTIFIER;
            if ($this->default !== null) {
                $spec    .= 'SET DEFAULT %s';
                $params[] = $this->default;
                $types[]  = self::TYPE_VALUE;
            } else {
                $spec    .= 'DROP DEFAULT';
            }
        }

        $data = [[
            $spec,
            $params,
            $types,
        ]];

        foreach ($this->constraints as $constraint) {
            $data[] = ' ';
            $data = array_merge($data, $constraint->getExpressionData());
        }

        return $data;
    }
}
