<?php

namespace Directus\Database\Schema\Sources\Expression;

use Zend\Db\Sql\Ddl\Column\Integer;
use Zend\Db\Sql\Ddl\Column\AbstractLengthColumn;
use Directus\Database\Ddl\Column\CollectionLength;

/**
 * Decorator for aut-incremented columns with PostgreSQL during a CREATE TABLE
 */
class PostgresAddIntegerColumn extends \Zend\Db\Sql\Ddl\Column\Integer
{
    /**
     * @var Column
     */
    protected $column;

    /**
     * Decorator for columns
     *
     * @param int $length
     */
    public function __construct($originalColumn)
    {
        $this->column = $originalColumn;
        $sealBreaker = function () {
            return $this->type;
        };        
        $this->type = $sealBreaker->call($originalColumn);
        parent::__construct($originalColumn->getName(), $originalColumn->isNullable(), $originalColumn->getDefault(), $originalColumn->getOptions());
    }

    /**
     * Override the generated SQL for PostgreSQL.
     * CREATE TABLE for PotgreSQL doesn't work IDENTITY data types
     * 
     * @return array
     * 
     */
    public function getExpressionData()
    {

        $options = $this->column->getOptions();

        $spec = $this->specification;

        $params   = [];
        $params[] = $this->name;
        $params[] = $this->type;

        $types = [self::TYPE_IDENTIFIER, self::TYPE_LITERAL];

        if (! $this->isNullable) {
            $spec .= ' NOT NULL';
        }

        if ($options["identity"]==true) {
            $spec    .= ' GENERATED BY DEFAULT AS IDENTITY';
        } else if ($this->default !== null) {
            $spec    .= ' DEFAULT %s';
            $params[] = $this->default;
            $types[]  = self::TYPE_VALUE;
        }

        $data = [[
            $spec,
            $params,
            $types,
        ]];

        foreach ($this->constraints as $constraint) {
            $data[] = ' ';
            $data = array_merge($data, $constraint->getExpressionData());
        }

        return $data;
    }
}
